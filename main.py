import json
import subprocess

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram import Dispatcher, Bot
from aiogram import executor
from keyboards import main_menue, back_to_menu
from aiogram.dispatcher import FSMContext


# –°–û–ë–ò–†–ê–ï–ú –ü–û–°–¢–´...
def collect_posts(channel):
    with open(f"{channel}.txt") as file:
        file = file.readlines()
    posts = []
    for n, line in enumerate(file):
        file[n] = json.loads(file[n])
        links = [link for link in file[n]['outlinks'] if channel not in link]
        p = str(file[n]['content']) + "\n\n" + str("\n".join(links))
        posts.append(p)
    return posts

# –í–´–ö–õ–ê–î–´–í–ê–ï–ú –ü–û–°–¢–´
def upload_posts(num_posts, channel):
    command = f'snscrape --max-result {num_posts} --jsonl telegram-channel {channel} > {channel}.txt'
    subprocess.run(command, shell=True)


class Q_classes(StatesGroup):
    q1 = State()


bot = Bot(token='7783210062:AAFC_H7lRdIPdcSrdbII_ETa0PY1pcTM25M')
dp = Dispatcher(bot, storage=MemoryStorage())



@dp.message_handler(commands=['start'])
async def start_command(message: Message):
    photo_path = 'fotos/black.jpg'
    await message.answer_photo(photo=open(photo_path, "rb"), caption=f"üë®üèª‚Äçüíª <b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ø–∞—Ä—Å–∏—Ç –ø–æ—Å—Ç—ã –≥—Ä—É–ø–ø, —á–∞—Ç–æ–≤, –∫–∞–Ω–∞–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —Ç–≤–æ–π –∫–∞–Ω–∞–ª</b>\n\n"
                                                                     f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menue, parse_mode='html')

@dp.callback_query_handler(lambda CallbackQuery: True)
async def process_callback(callback_query: CallbackQuery, state: FSMContext):
    query = callback_query.data
    if query == 'parse':
        molny_photo_path = 'fotos/lightning.jpg'
        await state.set_state(Q_classes.q1)
        await callback_query.message.answer_photo(photo=open(molny_photo_path, "rb"), caption='***1.*** –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–ø–∞—Ä—Å–∏—Ç—å\n\n'
                                                                                              '***2.*** –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ \n\n'
                                                                                              '***3.*** –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∫–∞–Ω–∞–ª –∫—É–¥–∞ –±—É–¥—É—Ç –≤—ã–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è –ø–æ—Å—Ç—ã:\n\n'
                                                                                              '***–ü—Ä–∏–º–µ—Ä:*** `another_channel 10 your_cahnnel`', reply_markup=back_to_menu, parse_mode='MARKDOWN')


@dp.message_handler(state=Q_classes.q1)
async def get_chat_name(message: Message, state: FSMContext):
    error_photo = 'fotos/error.jpg'
    success_photo_path = 'fotos/success.jpg'
    try:
        channel, num, target_channel = str(message.text).split()
        target_channel = '@'+target_channel

        upload_posts(num, channel)
        posts = collect_posts(channel)
        while posts:
            await bot.send_message(target_channel, posts.pop())
        await message.answer_photo(photo=open(success_photo_path, "rb"), caption=f'<b>–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å {channel} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>', parse_mode='html')
        await state.finish()

    except Exception:
        await message.answer_photo(photo=open(error_photo, "rb"), caption='***–û—à–∏–±–∫–∞...***\n\n'
                                                                          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', parse_mode='MARKDOWN')
        await state.reset_state()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
